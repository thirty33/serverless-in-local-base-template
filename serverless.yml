plugins:
  - serverless-dynamodb-local
  - serverless-offline

service: candidate
frameworkVersion: '2'

custom:
  tableName: candidates
  dynamodb:
    stages:
      - dev
      - local
    start:
      port: 8089
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      seed: true
      convertEmptyValues: true
      dbPath: "./.dynamodb"
      
provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  profile: ServelessAccount
  stage: dev
  region: us-east-1
  environment:
    tableName: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action: 
          - dynamodb:*
      Resource: '*'

functions:
  getUser:
    handler: lambdas/endpoints/getUser.handler
    events:
      - http:
            path: get-user/{ID}
            method: GET
            cors: true
  getPlayerScore:
    handler: lambdas/endpoints/getPlayerScore.handler
    events:
      - http:
            path: get-player-score/{ID}
            method: GET
            cors: true
  createPlayerScore:
    handler: lambdas/endpoints/createPlayerScore.handler
    events:
      - http:
            path: create-player-score/{ID}
            method: POST
            cors: true

resources:
  Resources:
    MyDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: ID
            AttributeType: S
        KeySchema:
          - AttributeName: ID
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        BillingMode: PAY_PER_REQUEST